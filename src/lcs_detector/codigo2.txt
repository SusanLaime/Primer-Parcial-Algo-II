import random
import datetime
import os
import json
import string

# --- Configuración y Constantes ---
# Nombre del archivo para guardar los datos de la tienda
TIENDA_DATA_FILE = "tienda_data.json"
MIN_CLIENTES_PRODUCTOS_GENERAR = 200 # Para asegurar líneas de código
MAX_CLIENTES_PRODUCTOS_GENERAR = 500

# --- Clases Base ---
class Entidad:
    """Clase base para entidades con un ID único."""
    _next_id = 1

    def __init__(self):
        self.id = Entidad._next_id
        Entidad._next_id += 1

    def __repr__(self):
        return f"ID: {self.id}"

    def to_dict(self):
        return {"id": self.id}

    @classmethod
    def from_dict(cls, data):
        obj = cls()
        obj.id = data["id"]
        if obj.id >= Entidad._next_id:
            Entidad._next_id = obj.id + 1
        return obj

# --- Clases Específicas ---
class Cliente(Entidad):
    """Representa a un cliente de la tienda online."""
    def __init__(self, nombre, apellido, email, direccion):
        super().__init__()
        self.nombre = nombre
        self.apellido = apellido
        self.email = email
        self.direccion = direccion
        self.historial_compras_ids = [] # IDs de órdenes de compra del cliente

    def __str__(self):
        return f"Cliente: {self.nombre} {self.apellido} ({self.email})"

    def to_dict(self):
        data = super().to_dict()
        data.update({
            "nombre": self.nombre,
            "apellido": self.apellido,
            "email": self.email,
            "direccion": self.direccion,
            "historial_compras_ids": self.historial_compras_ids
        })
        return data

    @classmethod
    def from_dict(cls, data):
        obj = cls(data["nombre"], data["apellido"], data["email"], data["direccion"])
        obj.id = data["id"]
        obj.historial_compras_ids = data.get("historial_compras_ids", [])
        if obj.id >= Entidad._next_id:
            Entidad._next_id = obj.id + 1
        return obj

class Producto(Entidad):
    """Representa un producto disponible en la tienda."""
    def __init__(self, nombre, descripcion, precio, stock_inicial=0):
        super().__init__()
        self.nombre = nombre
        self.descripcion = descripcion
        self.precio = float(precio)
        self.stock = int(stock_inicial)
        self.categoria = "General" # Valor por defecto
        self.vendido_count = 0 # Cuántas unidades se han vendido

    def __str__(self):
        return f"Producto: '{self.nombre}' (Precio: ${self.precio:.2f}, Stock: {self.stock})"

    def to_dict(self):
        data = super().to_dict()
        data.update({
            "nombre": self.nombre,
            "descripcion": self.descripcion,
            "precio": self.precio,
            "stock": self.stock,
            "categoria": self.categoria,
            "vendido_count": self.vendido_count
        })
        return data

    @classmethod
    def from_dict(cls, data):
        obj = cls(data["nombre"], data["descripcion"], data["precio"], data["stock"])
        obj.id = data["id"]
        obj.categoria = data.get("categoria", "General")
        obj.vendido_count = data.get("vendido_count", 0)
        if obj.id >= Entidad._next_id:
            Entidad._next_id = obj.id + 1
        return obj

class OrdenCompra(Entidad):
    """Representa una orden de compra realizada por un cliente."""
    def __init__(self, cliente_id, fecha_orden=None):
        super().__init__()
        self.cliente_id = cliente_id
        self.fecha_orden = fecha_orden if fecha_orden else datetime.date.today()
        self.productos = {} # {producto_id: cantidad}
        self.total_orden = 0.0
        self.estado = "Pendiente" # Pendiente, Completada, Cancelada

    def agregar_producto(self, producto_id, cantidad, precio_unitario):
        """Agrega un producto a la orden de compra."""
        if producto_id in self.productos:
            self.productos[producto_id] += cantidad
        else:
            self.productos[producto_id] = cantidad
        self.total_orden += precio_unitario * cantidad

    def __str__(self):
        return f"Orden #{self.id} de Cliente ID: {self.cliente_id} - Fecha: {self.fecha_orden} - Total: ${self.total_orden:.2f} - Estado: {self.estado}"

    def to_dict(self):
        data = super().to_dict()
        data.update({
            "cliente_id": self.cliente_id,
            "fecha_orden": self.fecha_orden.isoformat(),
            "productos": self.productos,
            "total_orden": self.total_orden,
            "estado": self.estado
        })
        return data

    @classmethod
    def from_dict(cls, data):
        fecha_orden = datetime.date.fromisoformat(data["fecha_orden"])
        obj = cls(data["cliente_id"], fecha_orden)
        obj.id = data["id"]
        obj.productos = data["productos"]
        obj.total_orden = data["total_orden"]
        obj.estado = data["estado"]
        if obj.id >= Entidad._next_id:
            Entidad._next_id = obj.id + 1
        return obj

class TiendaOnline:
    """Gestiona todos los clientes, productos y órdenes de compra."""
    def __init__(self):
        self.clientes = {}   # {id_cliente: objeto_cliente}
        self.productos = {}  # {id_producto: objeto_producto}
        self.ordenes = {}    # {id_orden: objeto_orden}
        self.cargar_datos()  # Cargar datos al iniciar

    def guardar_datos(self):
        """Guarda el estado actual de la tienda en un archivo JSON."""
        data = {
            "clientes": {c_id: cliente.to_dict() for c_id, cliente in self.clientes.items()},
            "productos": {p_id: producto.to_dict() for p_id, producto in self.productos.items()},
            "ordenes": {o_id: orden.to_dict() for o_id, orden in self.ordenes.items()},
            "_next_id_entidad": Entidad._next_id
        }
        try:
            with open(TIENDA_DATA_FILE, 'w') as f:
                json.dump(data, f, indent=4)
            print(f"Datos guardados en {TIENDA_DATA_FILE}")
        except IOError as e:
            print(f"Error al guardar datos: {e}")

    def cargar_datos(self):
        """Carga el estado de la tienda desde un archivo JSON."""
        if not os.path.exists(TIENDA_DATA_FILE):
            print("No se encontró archivo de datos. Iniciando con tienda vacía.")
            return

        try:
            with open(TIENDA_DATA_FILE, 'r') as f:
                data = json.load(f)

            Entidad._next_id = 1 # Restablecer el contador de IDs

            for cliente_data in data.get("clientes", {}).values():
                cliente = Cliente.from_dict(cliente_data)
                self.clientes[cliente.id] = cliente

            for producto_data in data.get("productos", {}).values():
                producto = Producto.from_dict(producto_data)
                self.productos[producto.id] = producto
            
            for orden_data in data.get("ordenes", {}).values():
                orden = OrdenCompra.from_dict(orden_data)
                self.ordenes[orden.id] = orden
            
            Entidad._next_id = data.get("_next_id_entidad", Entidad._next_id)

            print(f"Datos cargados desde {TIENDA_DATA_FILE}")

        except (IOError, json.JSONDecodeError) as e:
            print(f"Error al cargar datos desde {TIENDA_DATA_FILE}: {e}")
            print("Iniciando con tienda vacía.")
            self.clientes.clear()
            self.productos.clear()
            self.ordenes.clear()
            Entidad._next_id = 1

    # --- Métodos de Gestión ---
    def agregar_cliente(self, nombre, apellido, email, direccion):
        """Agrega un nuevo cliente."""
        cliente = Cliente(nombre, apellido, email, direccion)
        self.clientes[cliente.id] = cliente
        print(f"Cliente '{cliente}' agregado. ID: {cliente.id}")
        return cliente

    def agregar_producto(self, nombre, descripcion, precio, stock_inicial=0, categoria="General"):
        """Agrega un nuevo producto."""
        producto = Producto(nombre, descripcion, precio, stock_inicial)
        producto.categoria = categoria
        self.productos[producto.id] = producto
        print(f"Producto '{producto.nombre}' agregado. ID: {producto.id}")
        return producto

    def realizar_compra(self, cliente_id, carrito: dict):
        """
        Procesa una orden de compra para un cliente.
        carrito: {producto_id: cantidad}
        """
        cliente = self.clientes.get(cliente_id)
        if not cliente:
            print(f"Error: Cliente con ID {cliente_id} no encontrado.")
            return None

        nueva_orden = OrdenCompra(cliente_id)
        productos_vendidos_exitosamente = True
        
        # Validar stock primero
        for prod_id, cantidad_pedida in carrito.items():
            producto = self.productos.get(prod_id)
            if not producto:
                print(f"Error: Producto con ID {prod_id} no encontrado.")
                productos_vendidos_exitosamente = False
                break
            if producto.stock < cantidad_pedida:
                print(f"Error: No hay suficiente stock para '{producto.nombre}'. Disponible: {producto.stock}, Pedido: {cantidad_pedida}")
                productos_vendidos_exitosamente = False
                break
        
        if not productos_vendidos_exitosamente:
            print("La orden no pudo ser procesada debido a problemas de stock o productos inválidos.")
            return None

        # Si todo es válido, procesar la compra
        for prod_id, cantidad_pedida in carrito.items():
            producto = self.productos[prod_id] # Ya sabemos que existe
            producto.stock -= cantidad_pedida
            producto.vendido_count += cantidad_pedida
            nueva_orden.agregar_producto(prod_id, cantidad_pedida, producto.precio)
        
        nueva_orden.estado = "Completada"
        self.ordenes[nueva_orden.id] = nueva_orden
        cliente.historial_compras_ids.append(nueva_orden.id)
        print(f"Orden de compra #{nueva_orden.id} para cliente '{cliente.nombre}' procesada exitosamente. Total: ${nueva_orden.total_orden:.2f}")
        return nueva_orden

    def buscar_producto(self, query, por="nombre"):
        """Busca productos por nombre o categoría."""
        resultados = []
        for producto in self.productos.values():
            if por == "nombre" and query.lower() in producto.nombre.lower():
                resultados.append(producto)
            elif por == "categoria" and query.lower() in producto.categoria.lower():
                resultados.append(producto)
        return resultados

    def buscar_cliente(self, query, por="nombre"):
        """Busca clientes por nombre, apellido o email."""
        resultados = []
        for cliente in self.clientes.values():
            if por == "nombre" and query.lower() in cliente.nombre.lower():
                resultados.append(cliente)
            elif por == "apellido" and query.lower() in cliente.apellido.lower():
                resultados.append(cliente)
            elif por == "email" and query.lower() in cliente.email.lower():
                resultados.append(cliente)
            elif por == "nombre_completo" and query.lower() in str(cliente).lower():
                resultados.append(cliente)
        return resultados
    
    def _generar_nombre_aleatorio(self):
        nombres = ["Juan", "Maria", "Carlos", "Ana", "Pedro", "Sofia", "Luis", "Elena", "Diego", "Laura"]
        apellidos = ["García", "Rodríguez", "Martínez", "López", "González", "Pérez", "Sánchez", "Ramírez", "Fernández", "Díaz"]
        return random.choice(nombres), random.choice(apellidos)

    def _generar_email_aleatorio(self, nombre, apellido):
        return f"{nombre.lower()}.{apellido.lower()}{random.randint(1,100)}@example.com"

    def _generar_direccion_aleatoria(self):
        calles = ["Av. Siempre Viva", "Calle Falsa", "Bulevar de los Sueños", "Paseo de las Estrellas", "Ruta del Sol"]
        numeros = random.randint(100, 9999)
        ciudades = ["La Paz", "Santa Cruz", "Cochabamba", "Sucre", "Oruro"]
        return f"{random.choice(calles)} {numeros}, {random.choice(ciudades)}"

    def generar_datos_aleatorios(self, num_clientes=MAX_CLIENTES_PRODUCTOS_GENERAR, num_productos=MAX_CLIENTES_PRODUCTOS_GENERAR, num_ordenes=MIN_CLIENTES_PRODUCTOS_GENERAR):
        """Genera datos aleatorios para poblar la tienda."""
        print("\nGenerando datos aleatorios...")
        
        # Generar clientes
        for i in range(num_clientes):
            nombre, apellido = self._generar_nombre_aleatorio()
            email = self._generar_email_aleatorio(nombre, apellido)
            direccion = self._generar_direccion_aleatoria()
            self.agregar_cliente(nombre, apellido, email, direccion)
        print(f"Se generaron {len(self.clientes)} clientes.")

        # Generar productos
        categorias = ["Electrónica", "Ropa", "Hogar", "Alimentos", "Juguetes", "Libros", "Deportes"]
        nombres_productos = ["Smartphone X", "Camiseta Algodón", "Cafetera Automática", "Laptop Pro", "Peluche Oso", "Novela de Ciencia Ficción", "Balón de Fútbol", "Auriculares Bluetooth"]
        descripciones_productos = ["Último modelo con cámara avanzada", "Cómoda y duradera para el día a día", "Prepara café en segundos", "Potente para profesionales", "Suave y abrazable", "Una aventura épica", "Alta calidad para rendimiento", "Sonido cristalino"]

        for i in range(num_productos):
            nombre = random.choice(nombres_productos) + f" {i}"
            descripcion = random.choice(descripciones_productos)
            precio = round(random.uniform(10.0, 1000.0), 2)
            stock = random.randint(10, 200)
            categoria = random.choice(categorias)
            self.agregar_producto(nombre, descripcion, precio, stock, categoria)
        print(f"Se generaron {len(self.productos)} productos.")

        # Generar órdenes de compra
        clientes_ids = list(self.clientes.keys())
        productos_ids = list(self.productos.keys())

        if not clientes_ids or not productos_ids:
            print("No hay suficientes clientes o productos para generar órdenes.")
            return

        for _ in range(num_ordenes):
            cliente_id = random.choice(clientes_ids)
            carrito_temporal = {}
            num_items = random.randint(1, 5) # 1 a 5 productos por orden
            
            for _ in range(num_items):
                prod_id = random.choice(productos_ids)
                cantidad = random.randint(1, 3) # 1 a 3 unidades del mismo producto
                carrito_temporal[prod_id] = carrito_temporal.get(prod_id, 0) + cantidad
            
            self.realizar_compra(cliente_id, carrito_temporal)
        
        print(f"Se generaron {len(self.ordenes)} órdenes de compra.")
        self.guardar_datos()

    def mostrar_estadisticas(self):
        """Muestra estadísticas básicas de la tienda."""
        print("\n--- Estadísticas de la Tienda Online ---")
        print(f"Total de Clientes: {len(self.clientes)}")
        print(f"Total de Productos: {len(self.productos)}")
        print(f"Total de Órdenes de Compra: {len(self.ordenes)}")

        total_ventas = sum(orden.total_orden for orden in self.ordenes.values() if orden.estado == "Completada")
        print(f"Total de Ventas Completadas: ${total_ventas:.2f}")

        # Productos más vendidos por cantidad de unidades
        vendidos = {}
        for prod_id, producto in self.productos.items():
            vendidos[prod_id] = producto.vendido_count
        
        productos_ordenados = sorted(vendidos.items(), key=lambda item: item[1], reverse=True)
        print("\nTop 5 Productos Más Vendidos (por unidades):")
        for i, (prod_id, count) in enumerate(productos_ordenados[:5]):
            if count > 0:
                producto = self.productos.get(prod_id)
                if producto:
                    print(f"  {i+1}. '{producto.nombre}' (Vendidas: {count})")
            else:
                print("  No hay productos con ventas para mostrar.")
                break # Salir si no hay más ventas

    def _menu_principal(self):
        """Muestra el menú principal de la aplicación."""
        print("\n--- Sistema de Gestión de Tienda Online ---")
        print("1. Agregar Cliente")
        print("2. Agregar Producto")
        print("3. Realizar Compra")
        print("4. Buscar Producto")
        print("5. Buscar Cliente")
        print("6. Ver Historial de Compras de Cliente")
        print("7. Mostrar Estadísticas")
        print("8. Generar Datos Aleatorios (Si la tienda está vacía o quieres más)")
        print("0. Salir")

    def ejecutar(self):
        """Punto de entrada principal de la aplicación."""
        while True:
            self._menu_principal()
            opcion = input("Seleccione una opción: ")

            if opcion == "1":
                nombre = input("Nombre del cliente: ")
                apellido = input("Apellido del cliente: ")
                email = input("Email del cliente: ")
                direccion = input("Dirección del cliente: ")
                self.agregar_cliente(nombre, apellido, email, direccion)
            elif opcion == "2":
                nombre = input("Nombre del producto: ")
                descripcion = input("Descripción del producto: ")
                precio = float(input("Precio del producto: "))
                stock = int(input("Stock inicial: "))
                categoria = input("Categoría (opcional, por defecto 'General'): ")
                self.agregar_producto(nombre, descripcion, precio, stock, categoria if categoria else "General")
            elif opcion == "3":
                cliente_id = int(input("ID del cliente que realiza la compra: "))
                carrito = {}
                while True:
                    prod_id = input("ID del producto a añadir (o 'fin' para terminar): ")
                    if prod_id.lower() == 'fin':
                        break
                    try:
                        prod_id = int(prod_id)
                        cantidad = int(input(f"Cantidad de unidades del producto ID {prod_id}: "))
                        if cantidad <= 0:
                            print("La cantidad debe ser mayor a 0.")
                            continue
                        carrito[prod_id] = carrito.get(prod_id, 0) + cantidad
                    except ValueError:
                        print("ID de producto o cantidad inválidos.")
                
                if carrito:
                    self.realizar_compra(cliente_id, carrito)
                else:
                    print("Carrito vacío. No se realizó ninguna compra.")

            elif opcion == "4":
                query = input("Buscar producto por (nombre/categoria): ").lower()
                if query not in ["nombre", "categoria"]:
                    print("Opción inválida. Use 'nombre' o 'categoria'.")
                    continue
                valor = input(f"Ingrese el {query}: ")
                resultados = self.buscar_producto(valor, query)
                if resultados:
                    print("\n--- Resultados de la Búsqueda de Productos ---")
                    for producto in resultados:
                        print(f"  ID: {producto.id}, Nombre: '{producto.nombre}', Precio: ${producto.precio:.2f}, Stock: {producto.stock}, Categoría: {producto.categoria}")
                else:
                    print("No se encontraron productos.")
            elif opcion == "5":
                query = input("Buscar cliente por (nombre/apellido/email/nombre_completo): ").lower()
                if query not in ["nombre", "apellido", "email", "nombre_completo"]:
                    print("Opción inválida. Use 'nombre', 'apellido', 'email' o 'nombre_completo'.")
                    continue
                valor = input(f"Ingrese el {query}: ")
                resultados = self.buscar_cliente(valor, query)
                if resultados:
                    print("\n--- Resultados de la Búsqueda de Clientes ---")
                    for cliente in resultados:
                        print(f"  ID: {cliente.id}, {cliente}, Dirección: {cliente.direccion}")
                else:
                    print("No se encontraron clientes.")
            elif opcion == "6":
                cliente_id = int(input("Ingrese el ID del cliente: "))
                cliente = self.clientes.get(cliente_id)
                if not cliente:
                    print(f"Error: Cliente con ID {cliente_id} no encontrado.")
                    continue
                
                if cliente.historial_compras_ids:
                    print(f"\n--- Historial de Compras de Cliente ID {cliente_id} ({cliente.nombre} {cliente.apellido}) ---")
                    for orden_id in cliente.historial_compras_ids:
                        orden = self.ordenes.get(orden_id)
                        if orden:
                            print(f"  - {orden}")
                            for prod_id, cantidad in orden.productos.items():
                                producto = self.productos.get(prod_id)
                                prod_nombre = producto.nombre if producto else "Producto Desconocido"
                                print(f"    -> {prod_nombre} (ID: {prod_id}) x {cantidad}")
                        else:
                            print(f"  - Orden ID {orden_id} no encontrada (posiblemente eliminada).")
                else:
                    print(f"El cliente ID {cliente_id} no tiene historial de compras.")
            elif opcion == "7":
                self.mostrar_estadisticas()
            elif opcion == "8":
                self.generar_datos_aleatorios()
            elif opcion == "0":
                self.guardar_datos()
                print("Saliendo del sistema de tienda. ¡Hasta pronto!")
                break
            else:
                print("Opción inválida. Por favor, intente de nuevo.")
            
            self.guardar_datos()

# --- Ejecución Principal ---
if __name__ == "__main__":
    tienda = TiendaOnline()
    if not tienda.clientes and not tienda.productos and not tienda.ordenes:
        print("\nLa tienda está vacía. Considera usar la opción '8' para generar datos aleatorios.")
    tienda.ejecutar()